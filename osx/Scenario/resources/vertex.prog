attribute vec3 a_Position;
attribute vec3 a_Normal;
attribute vec2 a_TextureCoordinate;

uniform mat4 u_ModelViewProjectionMatrix;
uniform mat4 u_ModelViewMatrix;
uniform mat4 u_NormalMatrix;
uniform mat4 u_ViewMatrix;

uniform vec3 u_EyePosition;
uniform vec3 u_LightPosition;

varying vec2 v_TextureCoordinate;
varying vec3 v_LightVector;
varying vec3 v_EyeVector;

void main() {
    gl_Position = u_ModelViewProjectionMatrix * vec4(a_Position, 1.0);
    
	vec3 worldPosition = (u_ModelViewMatrix * vec4(a_Position, 1.0)).xyz;
	
	vec3 normal = normalize(vec3(u_NormalMatrix * vec4(a_Normal, 1)));
	vec3 tangenttmp = vec3(0.0, 0.0, 1.0);
    if (a_Normal != vec3(0.0, 1.0, 0.0)) {
        tangenttmp = cross(a_Normal, vec3(0.0, 1.0, 0.0));
    }
    vec3 tangent = normalize(vec3(u_NormalMatrix * vec4(tangenttmp, 1)));
	vec3 binormal = cross(normal, tangent);
	
    v_LightVector = (u_ViewMatrix * vec4(u_LightPosition, 1.0)).xyz;
	vec3 tmpVec = v_LightVector-worldPosition;
	v_LightVector.x = dot(tmpVec, tangent);
	v_LightVector.y = dot(tmpVec, binormal);
	v_LightVector.z = dot(tmpVec, normal);
	v_LightVector = normalize(v_LightVector);
	
    vec3 eyePosition = (u_ModelViewMatrix * vec4(u_EyePosition, 1)).xyz;
	tmpVec = eyePosition-worldPosition;
	v_EyeVector.x = dot(tmpVec, tangent);
	v_EyeVector.y = dot(tmpVec, binormal);
	v_EyeVector.z = dot(tmpVec, normal);
	v_EyeVector = normalize(v_EyeVector);
	
	v_TextureCoordinate = a_TextureCoordinate;
}
